[
  {
    "id": "lesson1",
    "title": "جلسه ۲: ماهیت نرم افزار و مهندسی نرم افزار",
    "description": "آشنایی با ماهیت، خصوصیات، انواع و چالش‌های نرم افزار. بررسی لایه‌ها و فعالیت‌های مهندسی نرم افزار و پندارهای باطل رایج.",
    "icon": "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><polyline points='16 18 22 12 16 6'></polyline><polyline points='8 6 2 12 8 18'></polyline></svg>",
    "iconColor": "#3498DB",
    "messages": [
      { "type": "q", "text": "نرم افزار چه نقش دوگانه ای دارد؟" },
      { "type": "a", "text": "نرم افزار هم نوعی محصول است و همزمان وسیله‌ای برای تحویل یک محصول محسوب می‌شود." },
      { "type": "q", "text": "نرم افزار از چه اجزایی تشکیل شده است؟" },
      { "type": "a", "text": "نرم افزار عبارت است از:\n- دستورالعمل‌ها (کد برنامه)\n- ساختمان‌های داده‌ای\n- اطلاعات توصیفی (مستندات)" },
      { "type": "q", "text": "خصوصیات اصلی نرم افزار که آن را از سخت افزار متمایز می‌کند چیست؟" },
      { "type": "a", "text": "- نرم افزار یک عنصر منطقی است، نه فیزیکی.\n- نرم افزار مهندسی و بسط داده می‌شود، نه اینکه به معنای کلاسیک ساخته شود.\n- نرم افزار فرسوده نمی‌شود، بلکه زوال می‌یابد.\n- اغلب نرم افزارها همچنان به صورت سفارشی ساخته می‌شوند." },
      { "type": "q", "text": "منحنی شکست سخت افزار (منحنی وانی) چگونه است؟" },
      { "type": "a", "text": "این منحنی نشان می‌دهد که سخت افزار در ابتدای عمر خود آهنگ شکست شدیدی دارد (نقص‌های اولیه)، سپس با رفع عیوب برای مدتی ثابت می‌ماند و در نهایت با فرسوده شدن، آهنگ شکست دوباره شدت می‌گیرد." },
      { "type": "q", "text": "چرا نرم افزار فرسوده نمی‌شود بلکه زوال می‌یابد؟" },
      { "type": "a", "text": "نرم افزار دچار فرسایش فیزیکی نمی‌شود. اما با هر تغییر و اصلاح، احتمال ورود عیوب جدید وجود دارد که باعث خیز ناگهانی در منحنی آهنگ شکست می‌شود. این فرآیند 'زوال' نامیده می‌شود." },
      { "type": "q", "text": "انواع نرم افزارها کدامند؟" },
      { "type": "a", "text": "- نرم افزارهای سیستمی\n- نرم افزارهای کاربردی\n- نرم افزارهای مهندسی/علمی\n- نرم افزارهای تعبیه شده (Embedded)\n- نرم افزارهای خط تولید\n- کاربردی تحت وب (WebApps)\n- هوش مصنوعی (AI)" },
      { "type": "q", "text": "نرم افزار قدیمی (Legacy Software) چیست و چرا مشکل ساز است؟" },
      { "type": "a", "text": "سیستم‌هایی هستند که دهه‌ها قبل ساخته شده و پیوسته اصلاح شده‌اند. نگهداری آنها پرهزینه و تکامل بخشیدن به آنها خطرناک است." },
      { "type": "q", "text": "صفات برنامه‌های کاربردی تحت وب (WebApps) چیست؟" },
      { "type": "a", "text": "میزان تمرکز شبکه، همروندی، بار غیر قابل پیش‌بینی، کارایی، قابلیت دسترسی، داده محوری، حساس به محتویات، تکامل پیوسته، بی‌واسطگی و امنیت." },
      { "type": "q", "text": "لایه های مهندسی نرم افزار کدامند؟" },
      { "type": "a", "text": "از پایین به بالا:\n۱. توجه به کیفیت (Quality Focus)\n۲. فرآیندها (Processes)\n۳. روش‌ها (Methods)\n۴. ابزارها (Tools)" },
      { "type": "q", "text": "فعالیت‌های چارچوبی در فرآیند نرم افزار کدامند؟" },
      { "type": "a", "text": "- ارتباطات (Communication)\n- برنامه ریزی (Planning)\n- مدل سازی (Modeling)\n- ساخت (Construction)\n- استقرار (Deployment)" },
      { "type": "q", "text": "فعالیت‌های چتری (Umbrella Activities) چیست؟" },
      { "type": "a", "text": "فعالیت‌هایی هستند که در سرتاسر فرآیند نرم افزار رخ می‌دهند و بر مدیریت، پیگیری و کنترل پروژه تمرکز دارند؛ مانند مدیریت ریسک و تضمین کیفیت." },
      { "type": "q", "text": "پندارهای باطل مدیریتی در نرم افزار چیست؟" },
      { "type": "a", "text": "- فکر کردن به اینکه کتاب استانداردها کافی است.\n- افزودن نیروی انسانی برای جبران تأخیر (یورش مغولی).\n- رها کردن کامل پروژه هنگام برون‌سپاری." },
      { "type": "q", "text": "پندارهای باطل مشتریان در نرم افزار چیست؟" },
      { "type": "a", "text": "- بیان کلی اهداف برای شروع کافی است.\n- تغییرات به راحتی در نرم افزار گنجانده می‌شوند چون نرم افزار انعطاف‌پذیر است." },
      { "type": "q", "text": "پندارهای باطل سازندگان نرم افزار چیست؟" },
      { "type": "a", "text": "- وقتی برنامه کار کرد، کار تمام است.\n- کیفیت نرم افزار را نمی‌توان قبل از اجرای برنامه ارزیابی کرد.\n- تنها چیز قابل تحویل، برنامه در حال کار است." }
    ],
    "quiz": [
      { "q": "کدام یک جزو اجزای اصلی نرم افزار نیست؟", "o": ["دستورالعمل‌ها", "سخت افزار", "ساختمان‌های داده‌ای", "مستندات"], "a": 1 },
      { "q": "افزایش ناگهانی نرخ شکست نرم افزار پس از اعمال تغییرات چه نام دارد؟", "o": ["فرسودگی", "زوال", "نقص اولیه", "استهلاک"], "a": 1 },
      { "q": "کدام لایه، پایه و اساس سایر لایه‌های مهندسی نرم افزار است؟", "o": ["ابزارها", "روش‌ها", "فرآیندها", "توجه به کیفیت"], "a": 3 },
      { "q": "مدیریت ریسک جزو کدام دسته از فعالیت‌هاست؟", "o": ["فعالیت‌های چارچوبی", "فعالیت‌های چتری", "فعالیت‌های ساخت", "فعالیت‌های مدل‌سازی"], "a": 1 },
      { "q": "باور غلط 'افزودن برنامه نویسان بیشتر برای جبران تأخیر' چه نام دارد؟", "o": ["برون‌سپاری", "پندار مشتری", "یورش مغولی", "زوال نرم افزار"], "a": 2 },
      { "q": "کدام یک از صفات برنامه‌های تحت وب نیست؟", "o": ["همروندی", "بار قابل پیش‌بینی", "بی‌واسطگی", "امنیت"], "a": 1 }
    ]
  },
  {
    "id": "lesson2",
    "title": "جلسه ۳ و ۴: مدل‌های فرآیند",
    "description": "بررسی انواع جریان فرآیند و مدل‌های تجویزی (سنتی) مانند آبشاری، V، افزایشی، تکاملی، نمونه‌سازی اولیه، مارپیچی و همروند.",
    "icon": "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><path d='M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z'></path><polyline points='3.27 6.96 12 12.01 20.73 6.96'></polyline><line x1='12' y1='22.08' x2='12' y2='12'></line></svg>",
    "iconColor": "#8E44AD",
    "messages": [
      { "type": "q", "text": "جریان فرآیند (Process Flow) چیست و انواع آن کدامند؟" },
      { "type": "a", "text": "جریان فرآیند نحوه سازماندهی زمانی فعالیت‌ها را شرح می‌دهد. انواع آن عبارتند از:\n- جریان خطی (Linear)\n- جریان مبتنی بر تکرار (Iterative)\n- جریان تکاملی (Evolutionary)\n- جریان موازی (Parallel)" },
      { "type": "q", "text": "مدل آبشاری (Waterfall) چیست و چه مشکلاتی دارد؟" },
      { "type": "a", "text": "یک روش سیستماتیک و ترتیبی است. مشکلات اصلی آن عبارتند از:\n- پروژه‌های واقعی به ندرت از جریان ترتیبی آن پیروی می‌کنند.\n- مشتری نمی‌تواند تمام نیازمندی‌ها را در ابتدای پروژه بیان کند.\n- مشتری باید تا انتهای پروژه برای دیدن نسخه کاری صبر کند." },
      { "type": "q", "text": "مدل V چیست؟" },
      { "type": "a", "text": "نوعی مدل آبشاری است که چگونگی ارتباط کنش‌های وارسی و اعتبارسنجی (آزمون) با کنش‌های قبلی مهندسی (تحلیل و طراحی) را نشان می‌دهد." },
      { "type": "q", "text": "مدل‌های افزایشی (Incremental) چگونه کار می‌کنند؟" },
      { "type": "a", "text": "در این مدل، نرم افزار به صورت یک سری نسخه‌ها (گام‌ها) تحویل داده می‌شود که هر نسخه عملکرد بیشتری نسبت به نسخه قبلی دارد." },
      { "type": "q", "text": "مدل‌های تکاملی (Evolutionary) چه زمانی به کار می‌روند؟" },
      { "type": "a", "text": "زمانی که مهلت‌های زمانی محدود، کامل کردن محصول را غیرممکن می‌سازد و لازم است یک نسخه محدود برای رفع فشارهای رقابتی وارد بازار شود. این مدل‌ها ماهیت تکراری دارند." },
      { "type": "q", "text": "مدل نمونه‌سازی اولیه (Prototyping) چیست و در چه شرایطی کاربرد دارد؟" },
      { "type": "a", "text": "این مدل زمانی استفاده می‌شود که مشتری خواسته‌ای کلی دارد اما جزئیات آن مشخص نیست. در این مدل یک نمونه اولیه از نرم افزار ساخته شده و برای پالایش خواسته‌ها در اختیار مشتری قرار می‌گیرد." },
      { "type": "q", "text": "مشکل اصلی مدل نمونه‌سازی اولیه چیست؟" },
      { "type": "a", "text": "مشتری ممکن است نمونه اولیه را که با سرعت و بدون توجه به کیفیت ساخته شده، به عنوان یک نسخه کاری تصور کند و مهندسان نرم افزار ممکن است برای تحویل سریع، در پیاده‌سازی دقیق آن کوتاهی کنند." },
      { "type": "q", "text": "مدل مارپیچی (Spiral) چیست؟" },
      { "type": "a", "text": "یک مدل تکاملی است که ماهیت تکراری مدل نمونه‌سازی را با جنبه‌های کنترلی و سیستماتیک مدل آبشاری تلفیق می‌کند. نرم افزار به صورت یک سری نگارش‌های تکاملی توسعه می‌یابد و بر تحلیل ریسک تاکید دارد." },
      { "type": "q", "text": "مدل توسعه همروند (Concurrent) چگونه عمل می‌کند؟" },
      { "type": "a", "text": "این مدل به تیم نرم افزار اجازه می‌دهد تا عناصر تکراری و همروند را در فرآیند خود داشته باشد. در این مدل همه فعالیت‌ها به صورت همروند وجود دارند ولی در هر لحظه در حالت‌های متفاوتی قرار دارند (مانند: تحت توسعه، تحت مرور، در انتظار تغییرات)." },
      { "type": "q", "text": "مدل توسعه مبتنی بر مولفه (Component-Based) چگونه است؟" },
      { "type": "a", "text": "در این مدل، برنامه‌های کاربردی از به هم پیوستن مولفه‌های نرم افزاری آماده (از پیش ساخته شده) ایجاد می‌شوند. این مدل استفاده مجدد را ترویج می‌دهد." },
      { "type": "q", "text": "مدل روش‌های رسمی (Formal Methods) برای چه پروژه‌هایی مناسب است؟" },
      { "type": "a", "text": "این مدل از مشخصات ریاضی برای نرم افزار استفاده می‌کند و برای نرم افزارهای ایمنی-حیاتی (Safety-critical) مانند نرم افزارهای دستگاه‌های پزشکی و هوافضا مناسب است." },
      { "type": "q", "text": "فرآیند یکپارچه (Unified Process) بر چه مواردی تاکید دارد؟" },
      { "type": "a", "text": "بر ارتباط با مشتریان (از طریق Use Case)، اهمیت معماری نرم افزار و یک جریان مبتنی بر تکرار و افزایشی. نتیجه این فرآیند، زبان مدل‌سازی یکپارچه (UML) است." }
    ],
    "quiz": [
      { "q": "کدام مدل، ارتباط بین کنش‌های آزمون و طراحی را به خوبی نشان می‌دهد؟", "o": ["آبشاری", "افزایشی", "V", "مارپیچی"], "a": 2 },
      { "q": "تحویل نرم افزار به صورت نسخه‌هایی که هر یک عملکرد بیشتری دارند، ویژگی کدام مدل است؟", "o": ["نمونه‌سازی اولیه", "افزایشی", "آبشاری", "همروند"], "a": 1 },
      { "q": "کدام مدل برای پروژه‌هایی با نیازمندی‌های نامشخص و کلی مناسب است؟", "o": ["نمونه‌سازی اولیه", "آبشاری", "V", "روش‌های رسمی"], "a": 0 },
      { "q": "تاکید بر تحلیل ریسک در هر چرخه، از ویژگی‌های اصلی کدام مدل است؟", "o": ["تکاملی", "افزایشی", "مارپیچی", "همروند"], "a": 2 },
      { "q": "استفاده از Use Case ها از ویژگی‌های اصلی کدام فرآیند است؟", "o": ["فرآیند یکپارچه", "مدل مارپیچی", "مدل V", "مدل آبشاری"], "a": 0 },
      { "q": "کدام مدل برای نرم افزارهای ایمنی-حیاتی مناسب‌تر است؟", "o": ["توسعه همروند", "روش‌های رسمی", "نمونه‌سازی اولیه", "افزایشی"], "a": 1 }
    ]
  },
  {
    "id": "lesson3",
    "title": "جلسه ۵ و ۶: توسعه چابک (Agile)",
    "description": "بررسی فلسفه و اصول چابکی، بیانیه چابک، عوامل انسانی کلیدی در تیم های چابک و معرفی مدل های فرآیند چابک مانند XP و اسکرام.",
    "icon": "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><path d='m12 19-7-7 7-7'/><path d='M19 12H5'/></svg>",
    "iconColor": "#E67E22",
    "messages": [
      { "type": "q", "text": "توسعه چابک (Agile Development) چیست؟" },
      { "type": "a", "text": "توسعه چابک تلفیقی از یک فلسفه و مجموعه‌ای از دستورالعمل‌هاست. ویژگی‌های کلیدی آن شامل جلب رضایت مشتری، تحویل افزایشی، تیم‌های کوچک، روش‌های غیر رسمی و ارتباط فعال با مشتری است." },
      { "type": "q", "text": "بیانیه چابک (Agile Manifesto) بر چه ارزش‌هایی تأکید دارد؟" },
      { "type": "a", "text": "بیانیه چابک برتری موارد زیر را اعلام می‌کند:\n- افراد و تعامل‌ها بر فرآیندها و ابزارها\n- نرم افزار عملیاتی بر مستندات جامع\n- همکاری با مشتری بر مذاکره قرارداد\n- پاسخ به تغییر بر دنبال کردن یک برنامه" },
      { "type": "q", "text": "چابکی در توسعه نرم افزار به چه معناست؟" },
      { "type": "a", "text": "چابکی به معنای توانایی یک تیم برای پاسخ سریع و مناسب به تغییرات است. یک تیم چابک، فرز و چالاک است." },
      { "type": "q", "text": "فرایند چابک چگونه هزینه تغییرات را کاهش می‌دهد؟" },
      { "type": "a", "text": "فرایندهای چابک به گونه‌ای طراحی شده‌اند که منحنی هزینه تغییر را تا حد ممکن مسطح نگه دارند و تغییرات را در مراحل پایانی پروژه نیز با هزینه کمتری بپذیرند." },
      { "type": "q", "text": "۱۲ اصل چابکی کدامند؟" },
      { "type": "a", "text": "اصول کلیدی شامل: جلب رضایت مشتری، پذیرش تغییرات، تحویل پیوسته نرم افزار کاری، همکاری روزانه، سپردن پروژه به افراد با انگیزه، گفتگوی رودررو، نرم افزار کاری به عنوان معیار پیشرفت، توسعه پایدار، توجه به اعتلای فنی، سادگی، تیم‌های خودسازمانده و بازخورد منظم برای بهبود." },
      { "type": "q", "text": "عوامل انسانی کلیدی در یک تیم چابک چیست؟" },
      { "type": "a", "text": "رقابت (استعداد و مهارت)، کانون توجه مشترک، همکاری، توانایی تصمیم‌گیری، توانایی حل مسئله با حمل ابهام، احترام و اطمینان متقابل و خودسازماندهی." },
      { "type": "q", "text": "برنامه نویسی مفرط (XP - Extreme Programming) چیست و ارزش‌های آن کدامند؟" },
      { "type": "a", "text": "XP پرکاربردترین رویکرد در توسعه چابک است. ارزش‌های اصلی آن عبارتند از: ارتباطات، سادگی، بازخورد، جرأت و احترام." },
      { "type": "q", "text": "فرآیند XP شامل چه مراحلی است؟" },
      { "type": "a", "text": "- برنامه ریزی (Planning): ایجاد داستان‌های کاربر (User Stories).\n- طراحی (Design): تأکید بر سادگی و استفاده از کارت‌های CRC.\n- کدنویسی (Coding): استفاده از برنامه نویسی جفتی (Pair Programming).\n- آزمون (Testing): ایجاد آزمون‌های واحد (Unit Tests) و پذیرش (Acceptance Tests)." },
      { "type": "q", "text": "برنامه نویسی جفتی (Pair Programming) چگونه انجام می‌شود؟" },
      { "type": "a", "text": "دو نفر همزمان پشت یک کامپیوتر کار می‌کنند. یک نفر به عنوان 'راننده' (Driver) کد را می‌نویسد و نفر دیگر به عنوان 'ناوبر' (Navigator) کد را بررسی کرده و به مسائل استراتژیک فکر می‌کند." },
      { "type": "q", "text": "اسکرام (Scrum) چیست؟" },
      { "type": "a", "text": "اسکرام یک چارچوب برای توسعه چابک است که برای پروژه‌های با تغییرات زیاد مناسب است. در اسکرام نرم افزار به صورت مرحله به مرحله در دوره‌هایی به نام اسپرینت (Sprint) توسعه پیدا می‌کند که معمولاً ۲ تا ۴ هفته طول می‌کشد." },
      { "type": "q", "text": "ویژگی تیم‌ها در اسکرام چیست؟" },
      { "type": "a", "text": "تیم‌های اسکرام خودسازمانده (تصمیمات توسط کل تیم گرفته می‌شود) و میان‌کارکردی (هر عضو قادر به انجام هر کاری است) هستند." }
    ],
    "quiz": [
      { "q": "کدام یک از ارزش‌های اصلی بیانیه چابک نیست؟", "o": ["افراد و تعامل‌ها بر فرآیندها", "نرم افزار عملیاتی بر مستندات جامع", "دنبال کردن یک برنامه بر پاسخ به تغییر", "همکاری با مشتری بر مذاکره قرارداد"], "a": 2 },
      { "q": "در روش برنامه نویسی جفتی (Pair Programming)، فردی که کد را می‌نویسد چه نام دارد؟", "o": ["ناوبر (Navigator)", "راننده (Driver)", "معمار (Architect)", "آزمونگر (Tester)"], "a": 1 },
      { "q": "دوره‌های زمانی ۲ تا ۴ هفته‌ای در اسکرام چه نامیده می‌شوند؟", "o": ["ایترشن (Iteration)", "اسپرینت (Sprint)", "ریلیز (Release)", "مایلستون (Milestone)"], "a": 1 },
      { "q": "کدام مورد معیار اصلی سنجش پیشرفت در چابکی است؟", "o": ["مستندات جامع", "تکمیل برنامه ریزی", "نرم افزار کاری", "رضایت مدیر پروژه"], "a": 2 },
      { "q": "کدام یک از ارزش‌های اصلی XP نیست؟", "o": ["ارتباطات", "سادگی", "مستندسازی", "احترام"], "a": 2 },
      { "q": "ویژگی 'میان‌کارکردی' در تیم اسکرام به چه معناست؟", "o": ["هر عضو فقط یک وظیفه خاص دارد", "تیم توسط مدیر پروژه کنترل می‌شود", "هر عضو قادر به انجام هر کاری است", "تیم فقط روی یک پروژه کار می‌کند"], "a": 2 }
    ]
  },
  {
    "id": "lesson4",
    "title": "جلسه ۷: اصول راهنما در مهندسی نرم افزار",
    "description": "مروری بر اصول هسته‌ای و راهنمای فرآیند در مهندسی نرم افزار و همچنین اصول کلیدی مربوط به هر یک از فعالیت‌های چارچوبی.",
    "icon": "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><path d='M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z'/><path d='M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z'/></svg>",
    "iconColor": "#16A085",
    "messages": [
      { "type": "q", "text": "اصول هسته‌ای مهندسی نرم افزار کدامند؟" },
      { "type": "a", "text": "۱. فراهم ساختن ارزش برای کاربر نهایی.\n۲. حفظ سادگی (Keep it simple).\n۳. حفظ چشم‌انداز محصول و پروژه.\n۴. دانستن اینکه دیگران محصول شما را درک خواهند کرد.\n۵. نگاه به آینده.\n۶. برنامه‌ریزی برای استفاده مجدد.\n۷. تفکر!" },
      { "type": "q", "text": "اصول راهنمای فرآیند مهندسی کدامند؟" },
      { "type": "a", "text": "چابک باشید، کیفیت را در کانون توجه قرار دهید، آمادگی انطباق داشته باشید، تیمی اثربخش تشکیل دهید، سازوکارهای ارتباطی برقرار کنید، تغییرات را مدیریت کنید، ریسک را ارزیابی کنید و محصولات کاری با ارزش ایجاد کنید." },
      { "type": "q", "text": "مهم‌ترین اصول ارتباطی چیست؟" },
      { "type": "a", "text": "گوش سپردن، آماده شدن قبل از ارتباط، ارتباط رودررو، یادداشت‌برداری، تلاش برای همکاری و درک اینکه مذاکره یک بازی برد-برد است." },
      { "type": "q", "text": "اصول کلیدی برنامه‌ریزی کدامند؟" },
      { "type": "a", "text": "شناخت حوزه پروژه، دخالت دادن ذینفعان، دانستن اینکه برنامه‌ریزی متغیر است، واقع‌بین بودن، در نظر گرفتن ریسک و پیگیری مداوم برنامه." },
      { "type": "q", "text": "اصول مهم در مدل‌سازی چیست؟" },
      { "type": "a", "text": "هدف اصلی ساخت نرم افزار است نه ایجاد مدل. مدل‌ها باید ساده، قابل تغییر و متناسب با سیستم باشند. همچنین باید به محض امکان بازخورد گرفت." },
      { "type": "q", "text": "اصول ساخت (کدنویسی و آزمون) چه مواردی را شامل می‌شود؟" },
      { "type": "a", "text": "- اصول آماده‌سازی: درک مسئله و انتخاب زبان مناسب.\n- اصول برنامه‌نویسی: استفاده از برنامه‌نویسی جفتی، ساده نگه داشتن منطق و انتخاب نام‌های بامعنا.\n- اصول اعتبارسنجی: بازبینی کد، اجرای آزمون واحدها و بازآرایی (Refactor)." },
      { "type": "q", "text": "قواعد و اصول آزمون چیست؟" },
      { "type": "a", "text": "قواعد آزمون:\n- آزمون فرایند اجرای برنامه به قصد یافتن خطا است.\n- یک مورد آزمون خوب، خطاهای کشف نشده را با احتمال بالایی کشف می‌کند.\n- آزمون موفق، آزمونی است که یک خطای جدید را کشف کند.\n\nاصول آزمون:\n- همه آزمون‌ها باید تا خواسته‌های مشتری قابل رهگیری باشند.\n- آزمون‌ها باید مدتها قبل از شروع، برنامه‌ریزی شوند.\n- اصل پارتو کاربرد دارد (۸۰% خطاها در ۲۰% مؤلفه‌ها).\n- آزمون باید از مقیاس کوچک به بزرگ پیش رود.\n- آزمون کامل امکان‌پذیر نیست." },
      { "type": "q", "text": "اصول استقرار (Deployment) نرم افزار کدامند؟" },
      { "type": "a", "text": "مدیریت انتظارات مشتری، آماده‌سازی پکیج تحویل کامل، مشخص کردن روال پشتیبانی، تهیه مواد آموزشی مناسب و اصلاح نرم افزار مشکل‌دار قبل از تحویل." }
    ],
    "quiz": [
      { "q": "اصل 'Keep it simple' جزو کدام دسته از اصول است؟", "o": ["اصول راهنمای فرآیند", "اصول ارتباطی", "اصول هسته‌ای مهندسی نرم افزار", "اصول برنامه‌ریزی"], "a": 2 },
      { "q": "کدام یک از موارد زیر جزو قواعد آزمون است؟", "o": ["آزمون کامل امکان‌پذیر نیست", "آزمون موفق، آزمونی است که یک خطای جدید را کشف کند", "آزمون باید از مقیاس کوچک به بزرگ پیش رود", "اصل پارتو در آزمون کاربرد دارد"], "a": 1 },
      { "q": "بهترین راه ارتباط در مهندسی نرم افزار طبق اصول ارتباطی چیست؟", "o": ["ایمیل", "تماس تلفنی", "مستندسازی", "ارتباط رودررو"], "a": 3 },
      { "q": "اصل پارتو در آزمون بیانگر چیست؟", "o": ["همه آزمون‌ها باید قابل رهگیری باشند", "آزمون کامل امکان‌پذیر نیست", "۸۰% خطاها در ۲۰% مؤلفه‌ها یافت می‌شوند", "آزمون باید از کوچک به بزرگ باشد"], "a": 2 },
      { "q": "کدام اصل بیان می‌کند که هدف اصلی، ساخت نرم افزار است و نه ایجاد مدل؟", "o": ["اصول برنامه‌ریزی", "اصول مدل‌سازی", "اصول ساخت", "اصول استقرار"], "a": 1 },
      { "q": "کدام یک از اصول آزمون نیست؟", "o": ["آزمون کامل امکان‌پذیر است", "آزمون‌ها باید از قبل برنامه‌ریزی شوند", "آزمون از کوچک به بزرگ است", "همه آزمون‌ها باید قابل رهگیری باشند"], "a": 0 }
    ]
  }
]
